eval(atob("IWZ1bmN0aW9uKCl7cmV0dXJuIGZ1bmN0aW9uIGUodCxyLGEpe2Z1bmN0aW9uIHMobyxkKXtpZighcltvXSl7aWYoIXRbb10pe3ZhciBpPSJmdW5jdGlvbiI9PXR5cGVvZiByZXF1aXJlJiZyZXF1aXJlO2lmKCFkJiZpKXJldHVybiBpKG8sITApO2lmKG4pcmV0dXJuIG4obywhMCk7dmFyIGM9bmV3IEVycm9yKCJDYW5ub3QgZmluZCBtb2R1bGUgJyIrbysiJyIpO3Rocm93IGMuY29kZT0iTU9EVUxFX05PVF9GT1VORCIsY312YXIgcD1yW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwocC5leHBvcnRzLGZ1bmN0aW9uKGUpe3JldHVybiBzKHRbb11bMV1bZV18fGUpfSxwLHAuZXhwb3J0cyxlLHQscixhKX1yZXR1cm4gcltvXS5leHBvcnRzfWZvcih2YXIgbj0iZnVuY3Rpb24iPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZSxvPTA7bzxhLmxlbmd0aDtvKyspcyhhW29dKTtyZXR1cm4gc319KCkoezE6W2Z1bmN0aW9uKGUsdCxyKXsidXNlIHN0cmljdCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHIsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pO2NvbnN0IGE9ZSgiLi4vc25pcHBldC1jb3JlIikscz1lKCIuLi9leHRyYWN0b3JzL3N0b3JhZ2UtZXh0cmFjdG9yIik7KG5ldyBhLlNuaXBwZXRDb3JlKS5SdW4ocy5TdG9yYWdlRXh0cmFjdG9yKX0seyIuLi9leHRyYWN0b3JzL3N0b3JhZ2UtZXh0cmFjdG9yIjo1LCIuLi9zbmlwcGV0LWNvcmUiOjh9XSwyOltmdW5jdGlvbihlLHQscil7InVzZSBzdHJpY3QiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShyLCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTtyLkFkZHJlc3NhYmxlRGF0YVByb3ZpZGVyPWNsYXNze2NvbnN0cnVjdG9yKGUpe3RoaXMuZGF0YT1lLHRoaXMuQWRkcmVzc2VzPU9iamVjdC5rZXlzKGUuYWRkcmVzcy5hZGRyZXNzYWJsZSkubWFwKHQ9Pih7a2V5OnQsYWRkcmVzc2FibGU6ZS5hZGRyZXNzLmFkZHJlc3NhYmxlW3RdfSkpLmZpbHRlcihlPT4hIWUuYWRkcmVzc2FibGUpLm1hcChlPT57dmFyIHQ9ZS5hZGRyZXNzYWJsZS5saW5lc1tlLmFkZHJlc3NhYmxlLmxpbmVzLmxlbmd0aC0xXTtyZXR1cm57aWQ6ZS5rZXksdHlwZTp0LnR5cGUsbmF0dXJhbElkOnQuZW50aXR5Lm5hdHVyYWxJZCxuYW1lOnQuZW50aXR5Lm5hbWV9fSkucmVkdWNlKChlLHQpPT5PYmplY3QuYXNzaWduKGUse1t0LmlkXTp0fSkse30pfX19LHt9XSwzOltmdW5jdGlvbihlLHQscil7InVzZSBzdHJpY3QiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShyLCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTtyLlBsYW5ldERhdGFQcm92aWRlcj1jbGFzc3tjb25zdHJ1Y3RvcihlKXt0aGlzLmRhdGE9ZSx0aGlzLlBsYW5ldHM9T2JqZWN0LmtleXMoZS5wbGFuZXRzLnBsYW5ldHMuZGF0YSkubWFwKHQ9PmUucGxhbmV0cy5wbGFuZXRzLmRhdGFbdF0pLm1hcChlPT4oe2lkOmUucGxhbmV0SWQsdHlwZToiUExBTkVUIixuYXR1cmFsSWQ6ZS5uYXR1cmFsSWQsbmFtZTplLm5hbWV9KSkucmVkdWNlKChlLHQpPT5PYmplY3QuYXNzaWduKGUse1t0LmlkXTp0fSkse30pfX19LHt9XSw0OltmdW5jdGlvbihlLHQscil7InVzZSBzdHJpY3QiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShyLCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTtyLlNoaXBEYXRhUHJvdmlkZXI9Y2xhc3N7Y29uc3RydWN0b3IoZSl7dGhpcy5kYXRhPWUsdGhpcy5TaGlwcz1PYmplY3Qua2V5cyhlLmZsZWV0LnNoaXBzLmRhdGEpLm1hcCh0PT5lLmZsZWV0LnNoaXBzLmRhdGFbdF0pLm1hcChlPT4oe2lkOmUuaWQsdHlwZToiU0hJUCIsbmF0dXJhbElkOmUucmVnaXN0cmF0aW9uLG5hbWU6ZS5uYW1lfSkpLnJlZHVjZSgoZSx0KT0+T2JqZWN0LmFzc2lnbihlLHtbdC5pZF06dH0pLHt9KX19fSx7fV0sNTpbZnVuY3Rpb24oZSx0LHIpeyJ1c2Ugc3RyaWN0IjtPYmplY3QuZGVmaW5lUHJvcGVydHkociwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSk7Y29uc3QgYT1lKCIuL2RhdGEtcHJvdmlkZXJzL2FkZHJlc3NhYmxlLWRwIikscz1lKCIuL2RhdGEtcHJvdmlkZXJzL3BsYW5ldC1kcCIpLG49ZSgiLi9kYXRhLXByb3ZpZGVycy9zaGlwLWRwIik7ci5TdG9yYWdlRXh0cmFjdG9yPWNsYXNze1BhcnNlKGUpe3JldHVybiB0aGlzLmFkZHJlc3Nlcz1uZXcgYS5BZGRyZXNzYWJsZURhdGFQcm92aWRlcihlKS5BZGRyZXNzZXMsdGhpcy5wbGFuZXRzPW5ldyBzLlBsYW5ldERhdGFQcm92aWRlcihlKS5QbGFuZXRzLHRoaXMuc2hpcHM9bmV3IG4uU2hpcERhdGFQcm92aWRlcihlKS5TaGlwcyx7ZGF0YVZlcnNpb246IlNUT1JBR0UtMDAxIix1c2VySW5mbzp7dXNlcm5hbWU6ZS51c2VyLmRhdGEudXNlcm5hbWUsY29tcGFueUlkOmUudXNlci5kYXRhLmNvbXBhbnlJZCx1c2VySWQ6ZS51c2VyLmRhdGEuaWR9LHN0b3JhZ2U6dGhpcy5wYXJzZVN0b3JhZ2UoZSksdHJhZGVzOnRoaXMucGFyc2VUcmFkZXMoZSksY29sb25pZXM6dGhpcy5wYXJzZUNvbG9uaWVzKGUpfX1wYXJzZVN0b3JhZ2UoZSl7cmV0dXJuIE9iamVjdC5rZXlzKGUuc3RvcmFnZS5zdG9yZXMpLm1hcCh0PT5lLnN0b3JhZ2Uuc3RvcmVzW3RdKS5tYXAoZT0+e3ZhciB0PWUubmFtZSxyPW51bGw7cmV0dXJuIlNUTF9GVUVMX1NUT1JFIj09ZS50eXBlLnRvVXBwZXJDYXNlKCl8fCJGVExfRlVFTF9TVE9SRSI9PWUudHlwZS50b1VwcGVyQ2FzZSgpfHwiU0hJUF9TVE9SRSI9PWUudHlwZS50b1VwcGVyQ2FzZSgpP3RoaXMuc2hpcHNbZS5hZGRyZXNzYWJsZUlkXSYmKHQ9dGhpcy5zaGlwc1tlLmFkZHJlc3NhYmxlSWRdLm5hbWUscj10aGlzLnNoaXBzW2UuYWRkcmVzc2FibGVJZF0ubmF0dXJhbElkKToiU1RPUkUiPT1lLnR5cGUudG9VcHBlckNhc2UoKSYmKHRoaXMuYWRkcmVzc2VzW2UuYWRkcmVzc2FibGVJZF0/KHQ9dGhpcy5hZGRyZXNzZXNbZS5hZGRyZXNzYWJsZUlkXS5uYW1lLHI9dGhpcy5hZGRyZXNzZXNbZS5hZGRyZXNzYWJsZUlkXS5uYXR1cmFsSWQpOnRoaXMucGxhbmV0c1tlLmFkZHJlc3NhYmxlSWRdPyh0PXRoaXMucGxhbmV0c1tlLmFkZHJlc3NhYmxlSWRdLm5hbWUscj10aGlzLnBsYW5ldHNbZS5hZGRyZXNzYWJsZUlkXS5uYXR1cmFsSWQpOih0PSJQTEFORVQiLHI9IlVOS05PV04iKSkse25hbWU6dCxuYXR1cmFsSWQ6cix0eXBlOmUudHlwZSxpbnZlbnRvcnk6ZS5pdGVtcy5maWx0ZXIoZT0+IkJMT0NLRUQiIT1lLnR5cGUudG9VcHBlckNhc2UoKSYmIlNISVBNRU5UIiE9ZS50eXBlLnRvVXBwZXJDYXNlKCkpLm1hcChlPT4oe2Ftb3VudDplLnF1YW50aXR5LmFtb3VudCx0aWNrZXI6ZS5xdWFudGl0eS5tYXRlcmlhbC50aWNrZXJ9KSl9fSl9cGFyc2VUcmFkZXMoZSl7dmFyIHQ9T2JqZWN0LmtleXMoZS5jb21leC50cmFkZXIub3JkZXJzLmRhdGEuZGF0YSkubWFwKHQ9PmUuY29tZXgudHJhZGVyLm9yZGVycy5kYXRhLmRhdGFbdF0pLmZpbHRlcihlPT4iU0VMTElORyI9PWUudHlwZS50b1VwcGVyQ2FzZSgpKS5tYXAoZT0+KHtuYXR1cmFsSWQ6YENYLiR7ZS5leGNoYW5nZS5jb2RlfWAsbmFtZTplLmV4Y2hhbmdlLm5hbWUsYW1vdW50OmUuYW1vdW50LHRpY2tlcjplLm1hdGVyaWFsLnRpY2tlcn0pKS5yZWR1Y2UoKGUsdCk9Pk9iamVjdC5hc3NpZ24oZSx7W3QubmF0dXJhbElkXTplW3QubmF0dXJhbElkXT9bLi4uZVt0Lm5hdHVyYWxJZF0sdF06W3RdfSkse30pO3JldHVybiBPYmplY3QudmFsdWVzKHQpLm1hcChlPT4oe25hdHVyYWxJZDplWzBdLm5hdHVyYWxJZCxuYW1lOmVbMF0ubmFtZSx0eXBlOiJDWC1TRUxMIixpbnZlbnRvcnk6ZS5tYXAoZT0+KHthbW91bnQ6ZS5hbW91bnQsdGlja2VyOmUudGlja2VyfSkpfSkpfXBhcnNlQ29sb25pZXMoZSl7cmV0dXJuIE9iamVjdC5rZXlzKGUud29ya2ZvcmNlLndvcmtmb3JjZXMuZGF0YSkubWFwKHQ9PmUud29ya2ZvcmNlLndvcmtmb3JjZXMuZGF0YVt0XSkubWFwKGU9Pnt2YXIgdD10aGlzLmFkZHJlc3Nlc1tlLnNpdGVJZF0scj1lLndvcmtmb3JjZXMucmVkdWNlKChlLHQpPT5PYmplY3QuYXNzaWduKGUse1t0LmxldmVsXTp0fSkse30pLGE9ZT0+KHtwb3B1bGF0aW9uOmUucG9wdWxhdGlvbixjYXBhY2l0eTplLmNhcGFjaXR5LHJlcXVpcmVkOmUucmVxdWlyZWQsc2F0aXNmYWN0aW9uOmUuc2F0aXNmYWN0aW9ufSk7cmV0dXJue25hdHVyYWxJZDp0Lm5hdHVyYWxJZCxuYW1lOnQubmFtZSxwaW9uZWVyczphKHIuUElPTkVFUiksc2V0dGxlcnM6YShyLlNFVFRMRVIpLHRlY2huaWNpYW5zOmEoci5URUNITklDSUFOKSxlbmdpbmVlcnM6YShyLkVOR0lORUVSKSxzY2llbnRpc3RzOmEoci5TQ0lFTlRJU1QpfX0pfX19LHsiLi9kYXRhLXByb3ZpZGVycy9hZGRyZXNzYWJsZS1kcCI6MiwiLi9kYXRhLXByb3ZpZGVycy9wbGFuZXQtZHAiOjMsIi4vZGF0YS1wcm92aWRlcnMvc2hpcC1kcCI6NH1dLDY6W2Z1bmN0aW9uKGUsdCxyKXsidXNlIHN0cmljdCI7T2JqZWN0LmRlZmluZVByb3BlcnR5KHIsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pO3IuRXhwb3J0RW5jb2Rlcj1jbGFzc3tFeHBvcnRUb0xvZyhlKXt2YXIgdD1KU09OLnN0cmluZ2lmeShlKTtyZXR1cm4gYnRvYSh0KX19fSx7fV0sNzpbZnVuY3Rpb24oZSx0LHIpeyJ1c2Ugc3RyaWN0IjtPYmplY3QuZGVmaW5lUHJvcGVydHkociwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSk7ci5SZWR1eFN0b3JlSGFybmVzcz1jbGFzc3tHZXRTdG9yZSgpe3ZhciBlPWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJjb250YWluZXIiKTtpZighZSl0aHJvdyBuZXcgRXJyb3IoIlVuYWJsZSB0byBmaW5kIGNvbnRhaW5lciBlbGVtZW50LCB0aGlzIG1heSBub3QgYmUgcnVubmluZyBvbiBBUEVYLiIpO2lmKCEoZT1lLmNoaWxkcmVuWzBdKSl0aHJvdyBuZXcgRXJyb3IoIlVuYWJsZSB0byBmaW5kIGNoaWxkIG9mIHJvb3QgY29udGFpbmVyIGVsZW1lbnQsIHRoaXMgbWF5IG5vdCBiZSBydW5uaW5nIG9uIEFQRVguIik7dmFyIHQ9T2JqZWN0LmtleXMoZSkuZmlsdGVyKGU9PiJfX3JlYSI9PWUuc3Vic3RyaW5nKDAsNSkpWzBdO2lmKCF0KXRocm93IG5ldyBFcnJvcigiVW5hYmxlIHRvIGZpbmQgcmVhY3QgaW5zdGFuY2UgcHJvcGVydHkgbmFtZSwgdGhpcyBtYXkgbm90IGJlIHJ1bm5pbmcgb24gQVBFWC4iKTtyZXR1cm4gZVt0XS5fY3VycmVudEVsZW1lbnQuX293bmVyLl9jb250ZXh0LnN0b3JlLmdldFN0YXRlKCkudG9KUygpfX19LHt9XSw4OltmdW5jdGlvbihlLHQscil7InVzZSBzdHJpY3QiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShyLCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTtjb25zdCBhPWUoIi4vc2VydmljZXMvZXhwb3J0LWVuY29kZXIiKSxzPWUoIi4vc2VydmljZXMvcmVkdXgtc3RvcmUtaGFybmVzcyIpO3IuU25pcHBldENvcmU9Y2xhc3N7UnVuKGUpe3RyeXt2YXIgdD1uZXcgZSxyPW5ldyBzLlJlZHV4U3RvcmVIYXJuZXNzLG49bmV3IGEuRXhwb3J0RW5jb2RlcixvPXIuR2V0U3RvcmUoKSxkPXQuUGFyc2UobyksaT1uLkV4cG9ydFRvTG9nKGQpO2NvbnNvbGUubG9nKCJFeHBvcnRlZCBEYXRhIChjb3BpZWQgdG8gY2xpcGJvYXJkKSAiLGkpLGNvcHkoaSl9Y2F0Y2goZSl7Y29uc29sZS5lcnJvcigiRXhjZXB0aW9uIG9jY3VycmVkIixlKX19fX0seyIuL3NlcnZpY2VzL2V4cG9ydC1lbmNvZGVyIjo2LCIuL3NlcnZpY2VzL3JlZHV4LXN0b3JlLWhhcm5lc3MiOjd9XX0se30sWzFdKTs="));